DEVELOPMENT NOTEBOOK
- Ahmed Shahid

This is a reference document to log design decisions and other important 
milestones

2020-02-24	09:00 PM	Opened git repository, looked over material, and chose 
							Problem 1
							
						Initial thoughts: take a logic based approach (basically
							create a string after parsing the input number 
							through a bunch of if statements.  Start with small
							integers; should be able to repeat logic every three
							digits.  Then move onto decimals, and look into 
							deploying code as restful-API (locally)
							
2020-02-24	10:30 PM	End



2020-02-25	06:00 PM	Cloned repository and started work

						A quick and dirty solution would be to make a hashmap/
							dictionary of every number from 0 to 999, and then 
							repeat every 3 digits. Logic would look something
							like this:
							
								1) Split on decimal point
								2) Handle everything to the left first
								3) Split up input number into groups of 3 digits
								4) Every group of 3 would be evaluated the same
									way (lookup in the hasmap)
								5) Append the resulting strings with "million",
									"thousand", or nothing as appropriate and
									concatenate
									
						It would take a while to make that hashmap.
						
						Started coding a "hybrid" solution with groups of 
							hashmaps combined with logic
							
2020-02-25	07:40 PM	End



2020-02-25	09:00 PM	Continued coding

						This is basically the same as my initial approach, not
							much of a hybrid solution.  Maybe I should make 
							slightly longer hashmaps to handle special cases,
							like teens
							
						I should have started with unit tests. I think I will
							write some now with the unittest library.  I heard
							pytest is also good.
							
						Maybe I should look into a framework that scaffolds your
							python project for you. Pyscaffold?
							
						Pyscaffold has an option to build a Django project. This
							will be useful if I end up making a rest API, and if
							I decide to make a front-end.  I could make the rest
							API with tornado.  Pyscaffold seems to have way more
							than I need, though.
							
						I'll get the code working and make a basic unit test
							structure, then I'll think about proper scaffolding
							and rest API/web frameworks
							
						Wrote unit tests for spellOneDigit
						
						Fixed sooooo many stupid mistakes and got unit tests to
							pass.  Moving on to spellTwoDigits unit tests.
							
						Wrote spellTwoDigits unit tests and got them working.
							That went way better than the first round.  Moving 
							on to spellThreeDigits unit tests and coding.
							
						Finished spellThreeDigits unit tests and coding.  
							Tomorrow, will move on to spellNumber, will use 
							recursion, handle up to billions?
							
						Pushing code
							
2020-02-26	12:41 AM	End



2020-02-26	07:24 PM	Continuing Coding

						Final format of input should be string because I will
							ultimately have to split on the decimal.  I am about
							to start on the spellInteger functionality.  Should
							I take integer as an input?  I don't think so 
							because split isn't happening here.
							
						However, I will have to divide number up into sets of 3
							digits.  It might be good to take string as input.
							
2020-02-26 07:40 PM		End



2020-02-26 09:20 PM		Resumed coding

						spellInteger needs an upper bound.  Choosing 
							999,999,999,999.
							
						If I split groups of three into list, should places be
							represented by indices and tracked in a separate 
							dictionary?  Or should I just use the dictionary?
							
						First iteration didn't work, but I forgot to use
							recursion
							
						After several attempts, got the recursion working, and
							all unit tests for spellInteger are working.  Added
							a few helper functions (getCleanIntString, 
							getNextPlace).
							
						Pushing code
						
2020-02-27	12:04 AM	End



2020-02-28	08:07 AM	No coding, just recording thoughts

						Since core functionality is complete, I will now focus
							on REST service and maybe Docker container before 
							adding functionality.
							
2020-02-28	08:10 AM	End



2020-02-29	04:30 PM	Continuing Coding

						Creating "numberSpeller" interface for REST service
							because I know I will end up using a class with
							that name.  For now it returns integerSpeller, but
							I will build out functionality to include decimals,
							etc.
							
						Starting numberSpeller REST service.  Using tornado, and
							copyting off template of code I wrote previously.
							
						Tornado implementation failed.  After some Googling, it
							turns out Tornado updated some api in the ioloop or
							something.  Not really sure, but I will move to 
							Flask instead
							
						Got a working version of the Flask code and tested it
							out with postman.  How will I unit test this?  After
							figuring out unit tests, I should look into Docker.
							Unit tests may be easier if I use a combination of
							PowerShell and Curl.  I should also look into error
							handling with the REST service.  How do I specify 
							port?
							
						Pushing code.
						
2020-02-29 06:42 PM		End